module ActiveMessaging
  module Test
    module PollerControl
      
      # start the poller
      def start_poller
        @poller_thread = Thread.start do
          begin        
            ActiveMessaging::System.start_poller
          rescue Exception => exception
            Thread.current[:exception] = exception
          end
        end      
      end
      
      # stop the poller raising any exceptions generated by the poller.
      def stop_poller              
        ActiveMessaging::System.stop_poller
        @poller_thread.join
        
        if e = @poller_thread[:exception]
          puts e, e.backtrace.join("\n\t") if e
          raise e
        end        
      end
      
    end
  end
end